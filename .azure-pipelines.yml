#***************************************************************************
#                                  _   _ ____  _
#  Project                     ___| | | |  _ \| |
#                             / __| | | | |_) | |
#                            | (__| |_| |  _ <| |___
#                             \___|\___/|_| \_\_____|
#
# Copyright (C) 1998 - 2022, Daniel Stenberg, <daniel@haxx.se>, et al.
#
# This software is licensed as described in the file COPYING, which
# you should have received as part of this distribution. The terms
# are also available at https://curl.se/docs/copyright.html.
#
# You may opt to use, copy, modify, merge, publish, distribute and/or sell
# copies of the Software, and permit persons to whom the Software is
# furnished to do so, under the terms of the COPYING file.
#
# This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
# KIND, either express or implied.
#
###########################################################################
# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - '*/ci'

pr:
  branches:
    include:
    - '*/ci'

resources:
  repositories:
  - repository: myBAC # The name used to reference this repository in the checkout step
    type: github
    endpoint: csalmon1
    name: csalmon1/BAC

stages:

##########################################
### Windows jobs below
##########################################

- stage: windows
  dependsOn: []
  variables:
    agent.preferPowerShellOnContainers: true
  jobs:
  - job: windows
    # define defaults to make sure variables are always expanded/replaced
    variables:
      container_img: ''
      container_cmd: ''
      configure: ''
      tests: ''
      git_tag: 'curl-7_72_0'
      build_config: ''
      plat: 'x86_64'
      os_desc: 'windows'
      sw_ed: ''
      comp_arg: '--enable-debug`'
      comp: 'x86_64-w64-mingw32-gcc'
    timeoutInMinutes: 120
    pool:
      vmImage: 'windows-2019'
    strategy:
      matrix:
        # config 1 - O1
        msys2_mingw64_debug_openssl:
          name: 64-bit OpenSSL/libssh2
          container_img: ghcr.io/mback2k/curl-docker-winbuildenv/msys2-mingw64:ltsc2019
          container_cmd: C:\msys64\usr\bin\sh
          prepare: pacman -S --needed --noconfirm --noprogressbar libssh2-devel mingw-w64-x86_64-libssh2 mingw-w64-x86_64-python-pip mingw-w64-x86_64-python-wheel mingw-w64-x86_64-python-pyopenssl && python3 -m pip install --prefer-binary impacket
          configure: --host=x86_64-w64-mingw32 --build=x86_64-w64-mingw32 --enable-debug --with-libssh2 --with-openssl CFLAGS="-O1"
          tests: "~571"
          build_config: win64_debug_openssl_libssh2_mingw64_O1
          sw_ed: --with-libssh2 --with-openssl
        ## Trying to build static (.lib), didn't work
        # msys2_mingw64_debug_static_openssl:
        #   name: 64-bit static OpenSSL/libssh2
        #   container_img: ghcr.io/mback2k/curl-docker-winbuildenv/msys2-mingw64:ltsc2019
        #   container_cmd: C:\msys64\usr\bin\sh
        #   prepare: pacman -S --needed --noconfirm --noprogressbar libssh2-devel mingw-w64-x86_64-libssh2 mingw-w64-x86_64-python-pip mingw-w64-x86_64-python-wheel mingw-w64-x86_64-python-pyopenssl && python3 -m pip install --prefer-binary impacket
        #   configure: --host=x86_64-w64-mingw32 --build=x86_64-w64-mingw32 --enable-debug --enable-werror --disable-shared --with-libssh2 --with-openssl
        #   tests: "~571"
        #   build_config: win64_debug_static_openssl_libssh2_mingw64
        #   sw_ed: --disable-shared --with-libssh2 --with-openssl
        # # config 2
        # msys2_mingw64_debug_libssh:
        #   name: 64-bit OpenSSL/libssh
        #   container_img: ghcr.io/mback2k/curl-docker-winbuildenv/msys2-mingw64:ltsc2019
        #   container_cmd: C:\msys64\usr\bin\sh
        #   prepare: pacman -S --needed --noconfirm --noprogressbar libssh-devel mingw-w64-x86_64-libssh
        #   configure: --host=x86_64-w64-mingw32 --build=x86_64-w64-mingw32 --enable-debug --with-libssh --with-openssl
        #   tests: "~571 ~614"
        #   build_config: win64_debug_openssl_libssh_mingw64
        #   sw_ed: --with-libssh --with-openssl
        # # config 3
        # msys1_mingw64_debug:
        #   name: 64-bit w/o zlib
        #   container_img: ghcr.io/mback2k/curl-docker-winbuildenv/msys1-mingw64:ltsc2019
        #   container_cmd: C:\MinGW\msys\1.0\bin\sh
        #   configure: --host=x86_64-w64-mingw32 --build=x86_64-w64-mingw32 --enable-debug --without-zlib --without-ssl
        #   tests: "!203 !1143"
        #   build_config: win64_debug_nozlib_nossl_mingw64
        #   sw_ed: --without-zlib --without-ssl
        # # config 4
        # msys2_mingw64_debug_schannel:
        #   name: 64-bit Schannel/SSPI/WinIDN/libssh2
        #   container_img: ghcr.io/mback2k/curl-docker-winbuildenv/msys2-mingw64:ltsc2019
        #   container_cmd: C:\msys64\usr\bin\sh
        #   prepare: pacman -S --needed --noconfirm --noprogressbar libssh2-devel mingw-w64-x86_64-libssh2 mingw-w64-x86_64-python-pip mingw-w64-x86_64-python-wheel mingw-w64-x86_64-python-pyopenssl && python3 -m pip install --prefer-binary impacket
        #   configure: --host=x86_64-w64-mingw32 --build=x86_64-w64-mingw32 --enable-debug --enable-sspi --with-schannel --with-winidn --with-libssh2
        #   tests: "~571"
        #   build_config: win64_debug_sspi_schannel_winidn_libssh2_mingw64
        #   sw_ed: --enable-sspi --with-schannel --with-winidn --with-libssh2
        # # config 5
        # msys1_mingw64_debug_schannel:
        #   name: 64-bit Schannel/SSPI/WinIDN w/o zlib
        #   container_img: ghcr.io/mback2k/curl-docker-winbuildenv/msys1-mingw64:ltsc2019
        #   container_cmd: C:\MinGW\msys\1.0\bin\sh
        #   configure: --host=x86_64-w64-mingw32 --build=x86_64-w64-mingw32 --enable-debug --enable-sspi --with-schannel --with-winidn --without-zlib
        #   tests: "!203 !1143"
        #   build_config: win64_debug_sspi_schannel_winidn_nozlib_mingw64
        #   sw_ed: --enable-sspi --with-schannel --with-winidn --without-zlib

    container:
      image: $(container_img)
      env:
        MSYS2_PATH_TYPE: inherit
    steps:
    - checkout: self   # self represents the repo where the initial Pipelines YAML file was found
      persistCredentials: true
    - checkout: myBAC  # this repo is defined in resources above
      persistCredentials: true

    - script: $(container_cmd) -l -c "cd $(echo '%cd%') && pwd && ls && cd BAC && mkdir -p $(git_tag)-$(build_config) && ls"
      displayName: 'view and mkdir'

    - script: $(container_cmd) -l -c "cd $(echo '%cd%') && cd curl && git checkout tags/$(git_tag)"
      displayName: Checkout tagged version
      
    - script: $(container_cmd) -l -c "cd $(echo '%cd%') && cd curl && $(prepare)"
      displayName: 'prepare'
      condition: variables.prepare

    - script: $(container_cmd) -l -c "cd $(echo '%cd%') && cd curl && ./buildconf && ./configure $(configure) --prefix=c:/__w/1/s/BAC/$(git_tag)-$(build_config)"
      displayName: 'configure $(name)'

    - script: $(container_cmd) -l -c "cd $(echo '%cd%') && cd curl && make V=1"
      displayName: 'compile'
      env:
        MAKEFLAGS: "-j 2"

    - script: $(container_cmd) -l -c "cd $(echo '%cd%') && cd curl && make V=1 install"
      displayName: 'install'

    - script: $(container_cmd) -l -c "cd $(echo '%cd%') && cd curl && ls && mv config.log ../BAC/$(git_tag)-$(build_config)"
      displayName: Copy config log to artifacts dir

    - script: $(container_cmd) -l -c "cd $(echo '%cd%') && cd BAC && ls $(git_tag)-$(build_config)"
      displayName: Check artifacts

    - script: |
        cd BAC/$(git_tag)-$(build_config)
        echo "Binary Artifact Description" >> description.txt
        echo "vendor: the curl project" >> description.txt
        echo "product: libcurl" >> description.txt
        echo "version:" $(git_tag) >> description.txt
        echo "target_hw:" $(plat) >> description.txt
        echo "target_sw:" $(os_desc) >> description.txt
        echo "sw_edition:" $(sw_ed) >> description.txt
        echo "compiler arg:" $(comp_arg) >> description.txt
        echo "compiler:" $(comp) >> description.txt
        echo "Azure job name:" $(name) >> description.txt
        echo "Azure job number:" $(Build.BuildNumber) >> description.txt
      displayName: Generate description file

    - script: |
        echo "Collecting build artifacts from dir: $(git_tag)-$(build_config)"
        cd BAC
        git config --global user.email "csalmon@oceanit.com"
        git config --global user.name "csalmon1"
        git checkout -b artifacts_$(git_tag)-$(build_config)
        git add $(git_tag)-$(build_config)/*
        git commit -m "Azure deployment $(Build.BuildNumber) moving $(git_tag)-$(build_config) artifacts to BAC repo [skip ci]"
        git push origin artifacts_$(git_tag)-$(build_config)
      displayName: Push artifacts to BAC repo

    #- script: $(container_cmd) -l -c "cd $(echo '%cd%') && make V=1 test-ci"
    #  displayName: 'test'
    #  env:
    #    AZURE_ACCESS_TOKEN: "$(System.AccessToken)"
    #    TFLAGS: "!IDN !SCP ~612 ~1056 $(tests)"
