#***************************************************************************
#                                  _   _ ____  _
#  Project                     ___| | | |  _ \| |
#                             / __| | | | |_) | |
#                            | (__| |_| |  _ <| |___
#                             \___|\___/|_| \_\_____|
#
# Copyright (C) 2021, 2022, Daniel Stenberg, <daniel@haxx.se>, et al.
#
# This software is licensed as described in the file COPYING, which
# you should have received as part of this distribution. The terms
# are also available at https://curl.se/docs/copyright.html.
#
# You may opt to use, copy, modify, merge, publish, distribute and/or sell
# copies of the Software, and permit persons to whom the Software is
# furnished to do so, under the terms of the COPYING file.
#
# This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
# KIND, either express or implied.
#
###########################################################################

# View these jobs in the browser: https://app.circleci.com/pipelines/github/curl/curl

# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

commands:
  configure:
    steps:
      - run:
          command: |
            ./buildconf
            SW_ED="openssl"
            echo "sw_editon: ${SW_ED}"
            ./configure --enable-warnings --enable-werror --with-${SW_ED} --prefix=/home/circleci/build
  configure-openssl-no-verbose:
    steps:
      - run:
          command: |
            ./buildconf
            ./configure --disable-verbose --enable-werror --with-openssl
  configure-no-proxy:
    steps:
      - run:
          command: |
            ./buildconf
            ./configure --disable-proxy --enable-werror --with-openssl
  install-cares:
    steps:
      - run:
          command: |
            sudo apt-get update && sudo apt-get install -y libc-ares-dev
  install-libssh:
    steps:
      - run:
          command: |
            sudo apt-get update && sudo apt-get install -y libssh-dev
  install-deps:
    steps:
      - run:
          command: |
            sudo apt-get update && sudo apt-get install -y libpsl-dev libbrotli-dev libzstd-dev zlib1g-dev
  configure-libssh:
    steps:
      - run:
          command: |
            ./buildconf
            ./configure --enable-warnings --enable-werror --with-openssl --with-libssh
  install-wolfssl:
    steps:
      - run:
          command: |
            curl -LO https://github.com/wolfSSL/wolfssl/archive/v5.1.1-stable.tar.gz
            tar -xzf v5.1.1-stable.tar.gz
            cd wolfssl-5.1.1-stable
            ./autogen.sh
            ./configure --enable-tls13 --enable-all --enable-harden --prefix=$HOME/wssl
            make && make install
  install-wolfssh:
    steps:
      - run:
          command: |
            curl -LO https://github.com/wolfSSL/wolfssh/archive/v1.4.8-stable.tar.gz
            tar -xzf v1.4.8-stable.tar.gz
            cd wolfssh-1.4.8-stable
            ./autogen.sh
            ./configure --with-wolfssl=$HOME/wssl --prefix=$HOME/wssh --enable-scp --enable-sftp --disable-examples
            make && make install
  configure-cares:
    steps:
      - run:
          command: |
            ./buildconf
            ./configure --enable-warnings --enable-werror --with-openssl --enable-ares
  configure-wolfssh:
    steps:
      - run:
          command: |
            ./buildconf
            LDFLAGS="-Wl,-rpath,$HOME/wssh/lib" ./configure --enable-warnings --enable-werror --with-wolfssl=$HOME/wssl --with-wolfssh=$HOME/wssh
  configure-cares-debug:
    steps:
      - run:
          command: |
            ./buildconf
            ./configure --enable-debug --enable-werror --with-openssl --enable-ares
  gettags:
    steps:
      - run:
          command: |
            git fetch --all --tags --prune
            git checkout tags/$TAG
            echo "my tag:" $TAG
  build:
    steps:
      - run: 
          command: |
            pwd
            make
            sudo make install
            # tar -zcvf ../artifacts.tar.gz /build/*
            pwd
            echo "my TAG" $TAG
  deploy:
    steps:          
      - run:
          command: |
            git remote set-url --push origin git@github.com:csalmon1/BAC.git
            git config user.email "csalmon@oceanit.com"
            git config user.name "csalmon"
            git symbolic-ref HEAD refs/heads/tag${TAG}
            rm .git/index
            git clean -fdx
            dirname="${TAG}x86ubuntuopensslgcc"
            sudo mkdir -p $dirname
            echo "Directory name:" $dirname
            #sudo mv ../artifacts.tar.gz curl/x86/ubuntu/$CIRCLE_TAG/openssl
            sudo mv /home/circleci/build/* $dirname
            git add ${dirname}/*
            git commit -m "Moving artifacts from $TAG to BAC repo [skip ci]"
            git push origin tag${TAG}
            echo "my TAG" $TAG

      #- store_artifacts:
      #    path: artifacts.tar.gz

  bac-deploy:
    steps:          
      - run:
          command: |
            cd ../
            git clone git@github.com:csalmon1/BAC. --branch=main
            cd BAC
            git checkout -b tag${TAG}
            git config user.email "csalmon@oceanit.com"
            git config user.name "csalmon"
            dirname="${TAG}x86ubuntuopensslgcc"
            sudo mkdir -p $dirname
            echo "Directory name:" $dirname
            sudo mv /home/circleci/build/* $dirname
            git add ${dirname}/*
            git commit -m "Moving artifacts from $TAG to BAC repo [skip ci]"
            git push origin tag${TAG}
            echo "my TAG" $TAG

  aws-deploy:
    steps:          
      - aws-s3/copy:
          aws-access-key-id: AWS_ACCESS_KEY_ID_BLUE
          aws-region: AWS_REGION_BLUE
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY_BLUE
          arguments:
          from: /home/circleci/build/description.txt
          to: 'arn:aws-us-gov:s3:us-gov-west-1:653605740874:accesspoint/curl-bucket-access'

  setvar:
    steps:
      - run:
          command: |
            echo 'export TAG="curl-7_81_0"' >> $BASH_ENV
            echo 'export SW_ED="sw_edition"' >> $BASH_ENV
  verify:
    steps:
      - run:
          command: |
            echo "my tag:" $TAG
            git status
  describe:
    steps:
      - run:
          command: |
            echo "Binary Artifact Description" >> description.txt
            echo "vendor: the curl project" >> description.txt
            echo "product: curl" >> description.txt
            echo "version:" $TAG >> description.txt
            echo "target_sw: ubuntu-2004:202101-01" >> description.txt
            echo "target_hw: x86" >> description.txt
            echo "sw_edition: ${SW_ED}" >> description.txt
            echo "compiler: gcc" >> description.txt
            echo "Circleci job name:" $CIRCLE_JOB >> description.txt
            echo "Circleci job number:" $CIRCLE_BUILD_NUM >> description.txt
            sudo mv description.txt /home/circleci/build
            sudo mv config.log /home/circleci/build

  test:
    steps:
      - run: make V=1 test-ci

executors:
  ubuntu:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: medium
    
orbs:
  aws-s3: circleci/aws-s3@3.0

jobs:
  x86-openssl:
    executor: ubuntu
    steps:
      - checkout
      - setvar
      - gettags
      - verify
      - configure
      - build
      - describe
      - bac-deploy
#      - test

  no-verbose:
    executor: ubuntu
    steps:
      - checkout
      - install-deps
      - configure-openssl-no-verbose
      - build

  wolfssh:
    executor: ubuntu
    steps:
      - checkout
      - install-deps
      - install-wolfssl
      - install-wolfssh
      - configure-wolfssh
      - build

  no-proxy:
    executor: ubuntu
    steps:
      - checkout
      - install-deps
      - configure-no-proxy
      - build
      - test

  cares:
    executor: ubuntu
    steps:
      - checkout
      - install-cares
      - configure-cares
      - build
      - test

  libssh:
    executor: ubuntu
    steps:
      - checkout
      - install-libssh
      - configure-libssh
      - build
      - test

  arm:
    machine:
      image: ubuntu-2004:202101-01
    resource_class: arm.medium
    steps:
      - checkout
      - configure
      - build
      - test

  arm-cares:
    machine:
      image: ubuntu-2004:202101-01
    resource_class: arm.medium
    steps:
      - checkout
      - install-cares
      - configure-cares-debug
      - build
      - test

workflows:
  basic:
    jobs:
      - x86-openssl

#          filters:
#            tags:
#              only: /^curl-7_69.*/
#            branches:
#              ignore: /.*/

#  openssl-c-ares:
#    jobs:
#      - cares

#  openssl-libssh:
#    jobs:
#      - libssh

#  openssl-no-proxy:
#    jobs:
#      - no-proxy

#  openssl-no-verbose:
#    jobs:
#      - no-verbose

#  wolfssl-wolfssh:
#    jobs:
#      - wolfssh

#  arm-openssl:
#    jobs:
#      - arm

#  arm-openssl-c-ares:
#    jobs:
#      - arm-cares
